// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/barcod3/socialcalendar/internal/processor (interfaces: EventsStore)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/barcod3/socialcalendar/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockEventsStore is a mock of EventsStore interface.
type MockEventsStore struct {
	ctrl     *gomock.Controller
	recorder *MockEventsStoreMockRecorder
}

// MockEventsStoreMockRecorder is the mock recorder for MockEventsStore.
type MockEventsStoreMockRecorder struct {
	mock *MockEventsStore
}

// NewMockEventsStore creates a new mock instance.
func NewMockEventsStore(ctrl *gomock.Controller) *MockEventsStore {
	mock := &MockEventsStore{ctrl: ctrl}
	mock.recorder = &MockEventsStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventsStore) EXPECT() *MockEventsStoreMockRecorder {
	return m.recorder
}

// StoreEvent mocks base method.
func (m *MockEventsStore) StoreEvent(arg0 context.Context, arg1 *model.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreEvent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreEvent indicates an expected call of StoreEvent.
func (mr *MockEventsStoreMockRecorder) StoreEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreEvent", reflect.TypeOf((*MockEventsStore)(nil).StoreEvent), arg0, arg1)
}
